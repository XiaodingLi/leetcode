public class Solution {
    public int maxEnvelopes(int[][] envelopes) {
        if (envelopes == null || envelopes.length == 0){
            return 0;
        }
        Arrays.sort(envelopes, new Comparator<int[]>(){
            public int compare(int[] arr1, int[] arr2){
                if (arr1[0] == arr2[0]){
                    return arr2[1] - arr1[1];
                } else {
                    return arr1[0] - arr2[0];
                }
            }
        });
        
        int[] dp = new int[envelopes.length];
        /*
        int rst = 1;
        for (int i = 0; i < envelopes.length; i++){
            dp[i] = 1;
            for (int j = 0; j < i; j++){
                if (envelopes[j][0] < envelopes[i][0] && envelopes[j][1] < envelopes[i][1]){
                    dp[i] = Math.max(dp[i], dp[j] + 1);
                }
                rst = Math.max(rst, dp[i]);
            }
        }*/  //time limit Exceeded   n^2
        
        int len = 0;
        for (int[] envelope: envelopes){
             Arrays.binarySearch(dp, 0, len, envelope[1]);
            int index = Arrays.binarySearch(dp, 0, len, envelope[1]);
            if (index < 0){
                index = -(index + 1);
            }
            dp[index] = envelope[1];
            if (index == len){
                len++;
            }
        }
        
        return len; // nlogn
        
        
        
    }
}
