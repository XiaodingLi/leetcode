public class Solution {
    public int[] findOrder(int numCourses, int[][] prerequisites) {
        int[][] matrix = new int[numCourses][numCourses];
        int[] indegree = new int[numCourses];
        for (int[] prereq : prerequisites){
            int pre = prereq[1];
            int cur = prereq[0];
            if (matrix[pre][cur] == 0){//must be this way, other wise get time error
                indegree[cur]++;
             }
                matrix[pre][cur] = 1;
        }
        Queue<Integer> q = new LinkedList<>();
        for (int i = 0; i < indegree.length; i++){
            if (indegree[i] == 0){
                q.offer(i);
            }
        }
        List<Integer> rst = new ArrayList<>();
        int count = 0;
        while (!q.isEmpty()){
        	count++;
            int from = q.poll();
            rst.add(from);
            for (int to = 0; to < numCourses; to++){
                if (matrix[from][to] != 0){
                    indegree[to]--;
                    if(indegree[to] == 0){
                        q.offer(to);
                    }
                }
            }
        }
        int[] finrst = getArray(rst);
        //return count == indegree.length ? finrst : new int[0]; 
         //if (count == numCourses){//get Error
          if (count == indegree.length)//Correct, 
	        	return finrst;
	        } else {
	        	return new int[0];
	        }
    }
    private int[] getArray(List<Integer> list){
        int[] rst = new int[list.size()];
        for (int i = 0; i < list.size(); i++){
            rst[i] = list.get(i);
        }
        return rst;
    }
}
